# /*******************************************************************************
#  * Copyright [2022] [IBM]
#  *
#  * Licensed under the Apache License, Version 2.0 (the "License");
#  * you may not use this file except in compliance with the License.
#  * You may obtain a copy of the License at
#  *
#  *     http://www.apache.org/licenses/LICENSE-2.0
#  *
#  * Unless required by applicable law or agreed to in writing, software
#  * distributed under the License is distributed on an "AS IS" BASIS,
#  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  * See the License for the specific language governing permissions and
#  * limitations under the License.
#  *******************************************************************************/
metadata:
  description: A Deep Neural Network model 
  macroDefinitions:
  - { name: windowSizeMsec , displayName: "Window size (msec)", description: "Sub-window size on which to compute raw features.",  
      defaultValue: 40, type: float, min: 20  }
  - { name: windowShiftPercent, displayName: "Window shift (%)", description: "Percentage of the window size to shift when computing the next sub-window.",  
      defaultValue: 50, choices: [0, 25, 50, 75] } 
  - { name: resamplingRate, displayName: "Re-sampling rate (htz)", description: "Sampling rate to which all data is normalize.",  defaultValue: 44100, type: integer } 
  - { name: featureExtractor, displayName: "Feature extractor", description: "Type of features to extract from data",  defaultValue: LogMel, choices: [LogMel, MFCC, FFT] }
  - { name: minFreq, displayName: "Minimum frequency (htz)", description: "Minimum frequency to include in computed features",  defaultValue: 20, type: integer, min: 1 }
  - { name: maxFreq, displayName: "Maximum frequency (htz)", description: "Maximum frequency to include in computed features",  defaultValue: 20000, type: integer, min: 1 }
  - { name: featureLen, displayName: "Feature length", description: "The length of the feature vector.",  defaultValue: 64,  type: integer, min: 1 }
  - { name: deltaProcessor, displayName: "Difference features", description: "Include 1st and 2nd order time derivative of spectrogram.",  defaultValue: false, choices: [false, true] }
  - { name: normalizeProcessor, displayName: "Normalize features", description: "Normalize each spectrogram",  defaultValue: false, choices: [false, true] }
  - { name: layerDefinition, displayName: "Layer definition", description: "Selects different layer definitions",
      defaultValue: DCASE, choices: [ CNN, DCASE] }
  - { name: maxEpochs, displayName: "Maximum # of epochs", description: "The maximum number of epochs to use to train the model.",  defaultValue: 200,  type: integer, min: 1  }
  - { name: useDiskCache, displayName: "Use Disk Cache", description: "Disk caching should be used for large amounts of data, 
        but is only available on the workbench/servers and installation with mongo installed.",  defaultValue: false,  type: boolean, choices: [false, true ]  }
templateText: |-
  // Model parameters
  var useDiskCache=false
  var useMemCache=false
  var layerDefinition='${layerDefinition}'
  var maxEpochs=${maxEpochs}

  // Define transform
  var transform=null
  
  // Feature parameters
  var fe;
  var fp = null;
  var resamplingRate=${resamplingRate}
  var minFreq=${minFreq}
  var maxFreq=${maxFreq}
  var windowSizeMsec=${windowSizeMsec}
  var windowShiftMsec=windowSizeMsec * ${windowShiftPercent}/100.0 
  var featureLen=${featureLen}
  var transform=null
  var useDiskCache=false
  var featureExtractor='${featureExtractor}'
  var normalizeProcessor='${normalizeProcessor}'
  var deltaProcessor='${deltaProcessor}'
  // Define the feature extractor
  if (featureExtractor === 'FFT') {
    fe = new FFTFeatureExtractor(resamplingRate, minFreq, maxFreq, false, true, featureLen)
  } else if (featureExtractor === 'LogMel') {
  	fe = new LogMelFeatureExtractor(resamplingRate, featureLen, minFreq, maxFreq, 0)
  } else {	// MFCC
    fe = new MFCCFeatureExtractor(resamplingRate, featureLen, minFreq, maxFreq, featureLen);
  }
  // Define the feature processor 
  if (normalizeProcessor === 'true')  
  	fp = new NormalizingFeatureProcessor(true,true,true,true)
  if (deltaProcessor === 'true')  {
    var dfp = new DeltaFeatureProcessor(2,[1,1,1]);
  	if (fp != null) 
  	    fp = new PipelinedFeatureProcessor(fp,dfp)
  	else
  	    fp = dfp
  }
  // Build the feature gram extractor 
  var fge = new FeatureGramDescriptor(windowSizeMsec, windowShiftMsec, fe, fp); 

  // Finally, create the classifier
  var classifier;
  var builder;
  if (layerDefinition === 'CNN') 
      builder =  new CNNClassifierBuilder()
      //classifier = new CNNClassifier(transform,  fge, useMemCache, useDiskCache, maxEpochs, CNNClassifier.BATCH_SIZE_DEFAULT)	
  else
      builder =  new DCASEClassifierBuilder()
      // classifier = new DCASEClassifier(transform,  fge, useMemCache, useDiskCache, maxEpochs, CNNClassifier.BATCH_SIZE_DEFAULT)	
  builder.setTransform(transform)
  builder.setFeatureGramDescriptor(fge)
  builder.setUseDiskCache(useDiskCache)
  builder.setNumberOfEpochs(maxEpochs);
  classifier = builder.build();

